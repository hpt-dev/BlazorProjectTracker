@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using MyApplication.Models
@inject IDialogService DialogService
@page "/"

<!--
<PageTitle>Index123</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
<MudText Class="mb-8">Welcome to your new app, powered by MudBlazor!</MudText>
<MudAlert Severity="Severity.Normal">You can find documentation and examples on our website here: <MudLink Href="https://mudblazor.com" Typo="Typo.body2" Color="Color.Inherit"><b>www.mudblazor.com</b></MudLink></MudAlert>
-->

<MudText Typo="Typo.h3">Project Tracker</MudText>

<MudPaper Height="100px" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Small">
          <div class="d-flex align-center justify-space-between">
            <MudTextField @bind-Value="TextValue" 
                Label="Add a Task" 
                Variant="Variant.Text" 
                Clearable="true" 
                Adornment="Adornment.End" 
                AdornmentIcon="@Icons.TwoTone.CheckBox" 
                AdornmentColor="Color.Tertiary" 
                Immediate="true" />

            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Tertiary" 
                OnClick="AddDropItem"
                Class="mt-5 ml-5">
                Add to Backlog
            </MudButton>
          </div>
    </MudContainer>
</MudPaper>

<MudDropContainer @ref="_dropContainer" T="WorkItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudListSubheader>Backlog</MudListSubheader>
                <MudDropZone T="WorkItem" Identifier="Backlog" Class="flex-grow-1" AllowReorder="true" >
                    
                </MudDropZone>

            </MudList>
        </MudPaper>

        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudListSubheader>Todo</MudListSubheader>
                <MudDropZone T="WorkItem" Identifier="Todo" Class="flex-grow-1" AllowReorder="true" />
            </MudList>
        </MudPaper>
        
        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudListSubheader>In Progress</MudListSubheader>
                <MudDropZone T="WorkItem" Identifier="Inprogress" Class="flex-grow-1" AllowReorder="true" />
            </MudList>
        </MudPaper>
        
        <MudPaper Class="ma-4 flex-grow-1">
            <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                <MudListSubheader>Done</MudListSubheader>
                <MudDropZone T="WorkItem" Identifier="Done" Class="flex-grow-1" AllowReorder="true" />
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Height="100px" Width="100%">
            <MudListItem Text="@context.Name" OnClick="@((e) => OpenDialog(context))" />
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="PieIndex" InputLabels="@labels" Width="300px" Height="300px" />
</MudPaper>


@code {
    private MudDropContainer<WorkItem> _dropContainer;

    public string TextValue { get; set; }

    private async Task OpenDialog(WorkItem item)
    {
        var parameters = new DialogParameters();
        parameters.Add("workItem", item);

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = DialogService.Show<Dialog>("Update Task", parameters, options);

        var result = await dialog.Result;
        //
        if (!result.Cancelled)
        {
            _dropContainer.Refresh(); 

            //var updatedItem = (WorkItem)result.Data;
        
            //_items.FirstOrDefault(x => x.Name == updatedItem.Name).Description = updatedItem.Description;
        
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //Servers.RemoveAll(item => item.Id == deletedServer);
        }

    }

    private void AddDropItem()
    {
        _items.Add(new WorkItem(){Name = TextValue, Selector = "Backlog"});

        TextValue = "";
        _dropContainer.Refresh(); 
        UpdatePieChart();
    }

    private void ItemUpdated(MudItemDropInfo<WorkItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
        UpdatePieChart();
    }

    private List<WorkItem> _items = new()
    {
        new WorkItem(){ Name = "Item 1", Selector = "Backlog", Description="Do Item1 asap" },
        new WorkItem(){ Name = "Item 2", Selector = "Todo", Description="Do Item2 asap" },
        new WorkItem(){ Name = "Item 3", Selector = "Todo" },
        new WorkItem(){ Name = "Item 4", Selector = "Backlog" },
        new WorkItem(){ Name = "Item 5", Selector = "Backlog" },
    };

    protected override void OnInitialized()
    {
        UpdatePieChart();
    }

    private void UpdatePieChart()
    {
        data[0] = _items.Count(x => x.Selector == "Backlog");
        data[1] = _items.Count(x => x.Selector == "Todo");
        data[2] = _items.Count(x => x.Selector == "Inprogress");
        data[3] = _items.Count(x => x.Selector == "Done");
    }


    private int PieIndex = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data = { 0,0,0,0 };
    string[] labels = { "Backlog", "Todo", "In Progress", "Done"};

}



